@page "/"
@using MatBlazor
@using PcrCalculatorLib
@using TimeZoneNames

<h1>行程规划</h1>
<h2>美国出发简易版</h2>
<hr>
<div class="alert alert-secondary mt-4" role="alert">
    <span class="oi oi-warning mr-2" aria-hidden="true"></span>
    <strong>本工具仅供参考，可能会由于政策时常变化、核酸码审核地领事馆特殊政策等产生不同的结果。本工具不检测航班是否存在、转机签证要求等内容，仅在假设上述因素均无问题时计算应该取得报告的时间。</strong>

    <span class="text-nowrap">
        使用前请务必查看
        <a target="_blank" class="font-weight-bold" href="source">数据来源</a>
    </span>
    <span class="text-nowrap">
        和
        <a target="_blank" class="font-weight-bold" href="about">关于</a>
    </span>
    页面。
</div>
<br>
<br>
    <p>请输入最终回国航班信息</p>
    <p>示例一（美国-第三国-中国）：底特律-首尔-上海，则填写首尔与首尔当地的出发日期时间</p>
    <p>示例二（美国-中国）：洛杉矶-广州，则填写洛杉矶与洛杉矶当地的出发日期时间</p>
    <p>示例三（美国-美国-中国）：底特律-洛杉矶-广州，则填写洛杉矶与洛杉矶当地的出发日期时间</p>
    <p>示例四（美国-美国-第三国-第三国-中国）：纽约肯尼迪-底特律-墨西哥城-首尔-广州，则填写首尔与首尔当地的出发日期时间</p>

        <hr>
        <label for=@("deptAirport")>出发机场</label>
        <select id=@("deptAirport") @bind="@deptAirport">
            @for (int i = 0; i < AirportNames.Length; i++)
            {
                <option value="@i">@AirportNames[i]</option>
            }
        </select>
        <br>
        <br>
        <p>当地出发时间</p>
        <MatDatePicker @bind-Value="deptTime" EnableTime="true"></MatDatePicker>
        <br>
        <br>
        <br>

    <br>
    <button class="btn btn-primary" @onclick="getResult">显示结果</button>
    <br>
    <br>
    <hr>
    @foreach (var message in result)
    {
        <p>@message</p>
    }

@code {
    private DateTime? deptTime;
    private string deptAirport;

    private string resultState = "";
    private List<string> result = new List<string>();

    private string[] AirportNames
    {
        get
        {
            if (AirportDataset.AirportNames == null)
                AirportDataset.LoadData();
            return AirportDataset.AirportNames;
        }
    }


    void getResult()
    {
        if(!deptTime.HasValue)
        {
            result = new List<string>() { "请输入最终回国航班的起飞日期时间（起飞地时区）" };
            return;
        }

        result = new List<string>();
        resultState = "";
        string checkedAirport = string.IsNullOrEmpty(deptAirport) ? "0" : deptAirport;
        var trip = new TripCheck();
        AddSegment(trip, checkedAirport, deptTime.Value);

        trip.CheckSimple();
        result = trip.Messages;
    }

    private void AddSegment(TripCheck trip, string departAirport, DateTime depart)
    {
        var departTime = depart.ToLocalTime();

        departTime = DateTime.SpecifyKind(departTime, DateTimeKind.Unspecified);

        trip.SetSegmentSimple(AirportDataset.Airports[Int32.Parse(departAirport)].Code, departTime);
    }
}